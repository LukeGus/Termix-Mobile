name: Build App
on:
  workflow_dispatch:
    inputs:
      platform:
        type: choice
        description: Platform to build for
        required: true
        options:
          - both
          - ios
          - android
      action:
        type: choice
        description: What to do with the built app
        required: true
        options:
          - release
          - submit
          - file
          - none
jobs:
  build:
    runs-on: ${{ matrix.platform == 'ios' && 'macos-26' || 'blacksmith-4vcpu-ubuntu-2404' }}
    strategy:
      matrix:
        platform: ${{ github.event.inputs.platform == 'both' && fromJSON('["ios", "android"]') || fromJSON(format('["{0}"]', github.event.inputs.platform)) }}
        node: [20.x]
    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v4

      - name: 🏗 Setup Node
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: 🏗 Setup Expo and EAS
        uses: expo/expo-github-action@v7
        with:
          token: ${{ secrets.EXPO_TOKEN }}
          expo-version: latest
          eas-version: latest

      - name: 📦 Install dependencies
        run: npm install

      - name: 🔍 Validate EAS configuration
        run: |
          echo "EAS configuration:"
          cat eas.json
          echo "Validating configuration..."
          eas build:configure --platform ${{ matrix.platform }}

      - name: 👷 Build app
        run: |
          # Determine profile based on action
          if [ "${{ github.event.inputs.action }}" = "submit" ]; then
            PROFILE="production"
          else
            PROFILE="preview"
          fi

          echo "Building for platform: ${{ matrix.platform }}"
          echo "Using profile: $PROFILE"

          # Create artifacts directory before build
          mkdir -p build-artifacts

          eas build --local \
            --non-interactive \
            --clear-cache \
            --platform=${{ matrix.platform }} \
            --profile=$PROFILE

          # Immediately copy artifacts after EAS build
          if [ "${{ matrix.platform }}" = "android" ]; then
            echo "Searching for Android build artifacts..."

            # EAS writes final artifact to project root as build-*.apk
            APK_FILE=$(find . -maxdepth 1 -type f -name "build-*.apk" 2>/dev/null | head -1)

            if [ -n "$APK_FILE" ]; then
              echo "Found APK in project root: $APK_FILE"
              cp "$APK_FILE" "build-artifacts/Termix-Android-universal.apk"
              echo "Copied to build-artifacts/Termix-Android-universal.apk"
            else
              # Fallback: search in /tmp
              echo "Trying /tmp search..."
              APK_FILE=$(find /tmp -type f -name "app-release.apk" 2>/dev/null | grep "eas-build-local-nodejs" | head -1)

              if [ -n "$APK_FILE" ]; then
                echo "Found APK in /tmp: $APK_FILE"
                cp "$APK_FILE" "build-artifacts/Termix-Android-universal.apk"
              else
                echo "ERROR: APK not found after build"
                ls -la . | grep -E '\.apk|build-'
              fi
            fi

            # Search for AAB if production build
            if [ "$PROFILE" = "production" ]; then
              # Check project root first
              AAB_FILE=$(find . -maxdepth 1 -type f -name "build-*.aab" 2>/dev/null | head -1)

              if [ -n "$AAB_FILE" ]; then
                echo "Found AAB in project root: $AAB_FILE"
                cp "$AAB_FILE" "build-artifacts/Termix-Android.aab"
              else
                # Fallback: search in /tmp
                AAB_FILE=$(find /tmp -type f -name "app-release.aab" 2>/dev/null | grep "eas-build-local-nodejs" | head -1)
                if [ -n "$AAB_FILE" ]; then
                  echo "Found AAB in /tmp: $AAB_FILE"
                  cp "$AAB_FILE" "build-artifacts/Termix-Android.aab"
                fi
              fi
            fi
          elif [ "${{ matrix.platform }}" = "ios" ]; then
            echo "Searching for iOS build artifacts..."

            # Check project root first for build-*.ipa
            IPA_FILE=$(find . -maxdepth 1 -type f -name "build-*.ipa" 2>/dev/null | head -1)

            if [ -n "$IPA_FILE" ]; then
              echo "Found IPA in project root: $IPA_FILE"
              cp "$IPA_FILE" "build-artifacts/Termix-iOS.ipa"
              echo "Copied to build-artifacts/Termix-iOS.ipa"
            else
              # Fallback: search for any .ipa
              IPA_FILE=$(find . -type f -name "*.ipa" -not -path "*/node_modules/*" 2>/dev/null | head -1)

              if [ -n "$IPA_FILE" ]; then
                echo "Found IPA: $IPA_FILE"
                cp "$IPA_FILE" "build-artifacts/Termix-iOS.ipa"
              else
                echo "ERROR: IPA not found after build"
                ls -la . | grep -E '\.ipa|build-'
              fi
            fi
          fi
        env:
          EAS_SKIP_AUTO_FINGERPRINT: 1

      - name: 📁 Verify build artifacts
        id: detect-artifacts
        run: |
          echo "=== Build Artifacts ==="

          if [ -d "build-artifacts" ]; then
            echo "Contents of build-artifacts/:"
            ls -lh build-artifacts/ 2>/dev/null || echo "Directory exists but is empty"

            # Count artifacts
            ARTIFACT_COUNT=$(ls -1 build-artifacts/ 2>/dev/null | wc -l)
            echo ""
            echo "Total artifacts: $ARTIFACT_COUNT"
          else
            echo "Warning: build-artifacts directory not found"
            mkdir -p build-artifacts
            ARTIFACT_COUNT=0
          fi

          echo "artifact_count=$ARTIFACT_COUNT" >> $GITHUB_OUTPUT

      - name: 🚢 Submit to App Store
        if: ${{ github.event.inputs.action == 'submit' }}
        run: |
          if [ "${{ matrix.platform }}" = "android" ]; then
            # For Android production submission, use AAB (required by Google Play)
            if [ -f "build-artifacts/Termix-Android.aab" ]; then
              BUILD_FILE="build-artifacts/Termix-Android.aab"
              echo "Using AAB for Play Store submission"
            else
              echo "ERROR: AAB not found for production submission"
              echo "Play Store requires AAB format for submissions"
              exit 1
            fi
          else
            # For iOS, use the IPA file
            BUILD_FILE="build-artifacts/Termix-iOS.ipa"
          fi

          if [ -n "$BUILD_FILE" ] && [ -f "$BUILD_FILE" ]; then
            echo "Submitting file: $BUILD_FILE"
            eas submit -p ${{ matrix.platform }} --profile production --path "$BUILD_FILE"
          else
            echo "No build file found to submit"
            exit 1
          fi

      - name: 📤 Upload Android APK
        if: ${{ github.event.inputs.action == 'file' && matrix.platform == 'android' }}
        uses: actions/upload-artifact@v4
        with:
          name: Termix-Android
          path: build-artifacts/Termix-Android-universal.apk
          retention-days: 30
          if-no-files-found: error

      - name: 📤 Upload iOS IPA
        if: ${{ github.event.inputs.action == 'file' && matrix.platform == 'ios' }}
        uses: actions/upload-artifact@v4
        with:
          name: Termix-iOS
          path: build-artifacts/Termix-iOS.ipa
          retention-days: 30
          if-no-files-found: error

      - name: 🚀 Upload to GitHub Release
        if: ${{ github.event.inputs.action == 'release' }}
        env:
          GH_TOKEN: ${{ secrets.TERMIX_RELEASE_TOKEN }}
        run: |
          # Get the latest release from Termix-SSH/Termix
          echo "Fetching latest release from Termix-SSH/Termix..."
          LATEST_RELEASE=$(gh release list --repo Termix-SSH/Termix --limit 1 --json tagName,name,isLatest -q '.[0]')

          if [ -z "$LATEST_RELEASE" ]; then
            echo "ERROR: No releases found in Termix-SSH/Termix"
            exit 1
          fi

          RELEASE_TAG=$(echo "$LATEST_RELEASE" | jq -r '.tagName')
          RELEASE_NAME=$(echo "$LATEST_RELEASE" | jq -r '.name')
          RELEASE_URL="https://github.com/Termix-SSH/Termix/releases/tag/$RELEASE_TAG"

          echo "Latest release: $RELEASE_NAME ($RELEASE_TAG)"
          echo "Release URL: $RELEASE_URL"

          # Upload artifacts to the release
          if [ "${{ matrix.platform }}" = "android" ]; then
            if [ -f "build-artifacts/Termix-Android-universal.apk" ]; then
              echo "Uploading Termix-Android-universal.apk..."
              gh release upload "$RELEASE_TAG" \
                "build-artifacts/Termix-Android-universal.apk" \
                --repo Termix-SSH/Termix \
                --clobber

              echo "✓ Android APK uploaded successfully"
            else
              echo "ERROR: Android APK not found"
              exit 1
            fi
          elif [ "${{ matrix.platform }}" = "ios" ]; then
            if [ -f "build-artifacts/Termix-iOS.ipa" ]; then
              echo "Uploading Termix-iOS.ipa..."
              gh release upload "$RELEASE_TAG" \
                "build-artifacts/Termix-iOS.ipa" \
                --repo Termix-SSH/Termix \
                --clobber

              echo "✓ iOS IPA uploaded successfully"
            else
              echo "ERROR: iOS IPA not found"
              exit 1
            fi
          fi

          echo ""
          echo "Build uploaded to release: $RELEASE_URL"
